// SPDX-License-Identifier: LGPL-3.0-only
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. !!
pragma solidity ^0.8.5;

interface IDelayModule {
    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);
    event ChangedGuard(address guard);
    event DelaySetup(
        address indexed initiator,
        address indexed owner,
        address indexed avatar,
        address target
    );
    event DisabledModule(address module);
    event EnabledModule(address module);
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event TargetSet(address indexed previousTarget, address indexed newTarget);
    event TransactionAdded(
        uint256 indexed queueNonce,
        bytes32 indexed txHash,
        address to,
        uint256 value,
        bytes data,
        uint8 operation
    );

    function avatar() external view returns (address);

    function disableModule(address prevModule, address module) external;

    function enableModule(address module) external;

    function execTransactionFromModule(
        address to,
        uint256 value,
        bytes memory data,
        uint8 operation
    ) external returns (bool success);

    function execTransactionFromModuleReturnData(
        address to,
        uint256 value,
        bytes memory data,
        uint8 operation
    ) external returns (bool success, bytes memory returnData);

    function executeNextTx(
        address to,
        uint256 value,
        bytes memory data,
        uint8 operation
    ) external;

    function getGuard() external view returns (address _guard);

    function getModulesPaginated(
        address start,
        uint256 pageSize
    ) external view returns (address[] memory array, address next);

    function getTransactionHash(
        address to,
        uint256 value,
        bytes memory data,
        uint8 operation
    ) external pure returns (bytes32);

    function getTxCreatedAt(uint256 _nonce) external view returns (uint256);

    function getTxHash(uint256 _nonce) external view returns (bytes32);

    function guard() external view returns (address);

    function isModuleEnabled(address _module) external view returns (bool);

    function owner() external view returns (address);

    function queueNonce() external view returns (uint256);

    function renounceOwnership() external;

    function setAvatar(address _avatar) external;

    function setGuard(address _guard) external;

    function setTarget(address _target) external;

    function setTxCooldown(uint256 cooldown) external;

    function setTxExpiration(uint256 expiration) external;

    function setTxNonce(uint256 _nonce) external;

    function setUp(bytes memory initParams) external;

    function skipExpired() external;

    // function target() external view returns (address);

    function transferOwnership(address newOwner) external;

    function txCooldown() external view returns (uint256);

    function txCreatedAt(uint256) external view returns (uint256);

    function txExpiration() external view returns (uint256);

    function txHash(uint256) external view returns (bytes32);

    function txNonce() external view returns (uint256);
}
